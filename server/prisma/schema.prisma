generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id           Int       @id @default(autoincrement())
  categoryName String?   @unique @map("category_name") @db.VarChar(100)
  products     Product[]

  @@map("categories")
}

model Order {
  id            Int            @id @default(autoincrement())
  // userId should be a foreign key
  userId        Int?           @map("user_id")
  // missing updatedAt field
  createdAt     DateTime?      @default(now()) @map("created_at") @db.Timestamp(6)
  amount        Decimal?       @db.Money
  // why is there a field called users when it also have a userId field, it should be user, singular
  users         User?          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ProductOrders ProductOrder[]

  @@map("orders")
}

model ProductOrder {
  id        Int      @id(map: "checkout_pkey") @default(autoincrement())
  // missing createdAt / updatedAt fields
  // productId should be a foreign key
  productId Int?     @map("product_id")
  quantity  Int?
  // orderId should be a foreign key
  orderId   Int?     @map("order_id")
  // why are those plural ? one ProductOrder is link with a single order and a single product
  products  Product? @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "checkout_product_id_fkey")
  orders    Order?   @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("product_orders")
}

model Product {
  id            Int            @id @default(autoincrement())
  // missing createdAt / updatedAt fields
  name          String         @db.VarChar(256) @unique 
  // description should be a text field
  description   String?        @db.VarChar(256)
  price         Decimal        @db.Money
  available     Boolean        @default(true)
  // should be a foreign key
  categoryId    Int?           @map("category_id")
  // why not mapping orders directly ? seems more convenient, and I'm sure Prisma has a "through" option
  ProductOrders ProductOrder[]
  // should be singular
  categories    Category?      @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("products")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(256)
  surname   String    @db.VarChar(256)
  // should be email type
  email     String    @unique @db.VarChar(256)
  phone     String?   @db.VarChar(50)
  address   String?   @db.VarChar(256)
  password  String    @db.VarChar(256)
  // probably want to use a scope Enum here, and have an array
  role RoleEnumType? @default(user)
  verified Boolean? @default(false) 
  verificationCode String? @db.Text @unique
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  // missing updatedAt field
  orders    Order[]

  @@unique([email, verificationCode])
  @@index([email, verificationCode])
  @@map("users")
}

enum RoleEnumType {
  user
  admin
}